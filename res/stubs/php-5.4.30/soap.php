<?php
# Generated by mfn/php-reflection-gen 0.0.1
# PHP version 5.4.30, extension soap
function use_soap_error_handler($handler) {}
function is_soap_fault($object) {}
class SoapClient{
  public function SoapClient($wsdl, $options) {}
  public function __call($function_name, $arguments) {}
  public function __soapCall($function_name, $arguments, $options, $input_headers, &$output_headers) {}
  public function __getLastRequest() {}
  public function __getLastResponse() {}
  public function __getLastRequestHeaders() {}
  public function __getLastResponseHeaders() {}
  public function __getFunctions() {}
  public function __getTypes() {}
  public function __doRequest($request, $location, $action, $version, $one_way) {}
  public function __setCookie($name, $value) {}
  public function __getCookies() {}
  public function __setLocation($new_location) {}
  public function __setSoapHeaders($soapheaders) {}
}
class SoapVar{
  public function SoapVar($data, $encoding, $type_name, $type_namespace, $node_name, $node_namespace) {}
}
class SoapServer{
  public function SoapServer($wsdl, $options) {}
  public function setPersistence($mode) {}
  public function setClass($class_name, $args) {}
  public function setObject($object) {}
  public function addFunction($functions) {}
  public function getFunctions() {}
  public function handle($soap_request) {}
  public function fault($code, $string, $actor, $details, $name) {}
  public function addSoapHeader($object) {}
}
class SoapFault extends Exception{
  public function SoapFault($faultcode, $faultstring, $faultactor, $detail, $faultname, $headerfault) {}
  public function __toString() {}
  final private function __clone() {}
  public function __construct($message, $code, $previous) {}
  final public function getMessage() {}
  final public function getCode() {}
  final public function getFile() {}
  final public function getLine() {}
  final public function getTrace() {}
  final public function getPrevious() {}
  final public function getTraceAsString() {}
}
class SoapParam{
  public function SoapParam($data, $name) {}
}
class SoapHeader{
  public function SoapHeader($namespace, $name, $data, $mustunderstand, $actor) {}
}
