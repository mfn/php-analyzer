<?php
# Generated by mfn/php-reflection-gen 0.0.1
# PHP version 5.4.30, extension Core 5.4.30
function zend_version() {}
function func_num_args() {}
function func_get_arg($arg_num) {}
function func_get_args() {}
function strlen($str) {}
function strcmp($str1, $str2) {}
function strncmp($str1, $str2, $len) {}
function strcasecmp($str1, $str2) {}
function strncasecmp($str1, $str2, $len) {}
function each(&$arr) {}
function error_reporting($new_error_level) {}
function define($constant_name, $value, $case_insensitive) {}
function defined($constant_name) {}
function get_class($object) {}
function get_called_class() {}
function get_parent_class($object) {}
function method_exists($object, $method) {}
function property_exists($object_or_class, $property_name) {}
function class_exists($classname, $autoload) {}
function interface_exists($classname, $autoload) {}
function trait_exists($traitname, $autoload) {}
function function_exists($function_name) {}
function class_alias($user_class_name, $alias_name, $autoload) {}
function get_included_files() {}
function get_required_files() {}
function is_subclass_of($object, $class_name, $allow_string) {}
function is_a($object, $class_name, $allow_string) {}
function get_class_vars($class_name) {}
function get_object_vars($obj) {}
function get_class_methods($class) {}
function trigger_error($message, $error_type) {}
function user_error($message, $error_type) {}
function set_error_handler($error_handler, $error_types) {}
function restore_error_handler() {}
function set_exception_handler($exception_handler) {}
function restore_exception_handler() {}
function get_declared_classes() {}
function get_declared_traits() {}
function get_declared_interfaces() {}
function get_defined_functions() {}
function get_defined_vars() {}
function create_function($args, $code) {}
function get_resource_type($res) {}
function get_loaded_extensions($zend_extensions) {}
function extension_loaded($extension_name) {}
function get_extension_funcs($extension_name) {}
function get_defined_constants($categorize) {}
function debug_backtrace($options, $limit) {}
function debug_print_backtrace($options) {}
function gc_collect_cycles() {}
function gc_enabled() {}
function gc_enable() {}
function gc_disable() {}
class stdClass{
}
class Exception{
  final private function __clone() {}
  public function __construct($message, $code, $previous) {}
  final public function getMessage() {}
  final public function getCode() {}
  final public function getFile() {}
  final public function getLine() {}
  final public function getTrace() {}
  final public function getPrevious() {}
  final public function getTraceAsString() {}
  public function __toString() {}
}
class ErrorException extends Exception{
  public function __construct($message, $code, $severity, $filename, $lineno, $previous) {}
  final public function getSeverity() {}
  final private function __clone() {}
  final public function getMessage() {}
  final public function getCode() {}
  final public function getFile() {}
  final public function getLine() {}
  final public function getTrace() {}
  final public function getPrevious() {}
  final public function getTraceAsString() {}
  public function __toString() {}
}
class Closure{
  private function __construct() {}
  static public function bind($closure, $newthis, $newscope) {}
  public function bindTo($newthis, $newscope) {}
}
interface Traversable{
}
interface IteratorAggregate extends Traversable{
  public function getIterator() {}
}
interface Iterator extends Traversable{
  public function current() {}
  public function next() {}
  public function key() {}
  public function valid() {}
  public function rewind() {}
}
interface ArrayAccess{
  public function offsetExists($offset) {}
  public function offsetGet($offset) {}
  public function offsetSet($offset, $value) {}
  public function offsetUnset($offset) {}
}
interface Serializable{
  public function serialize() {}
  public function unserialize($serialized) {}
}
