<?php
# Generated by mfn/php-reflection-gen 0.0.1
# PHP version 5.4.30, extension SPL 0.2
function spl_classes() {}
function spl_autoload($class_name, $file_extensions) {}
function spl_autoload_extensions($file_extensions) {}
function spl_autoload_register($autoload_function) {}
function spl_autoload_unregister($autoload_function) {}
function spl_autoload_functions() {}
function spl_autoload_call($class_name) {}
function class_parents($instance, $autoload) {}
function class_implements($what, $autoload) {}
function class_uses($what, $autoload) {}
function spl_object_hash($obj) {}
function iterator_to_array(Traversable $iterator, $use_keys) {}
function iterator_count(Traversable $iterator) {}
function iterator_apply(Traversable $iterator, $function, array $args) {}
class LogicException extends Exception{
  final private function __clone() {}
  public function __construct($message, $code, $previous) {}
  final public function getMessage() {}
  final public function getCode() {}
  final public function getFile() {}
  final public function getLine() {}
  final public function getTrace() {}
  final public function getPrevious() {}
  final public function getTraceAsString() {}
  public function __toString() {}
}
class BadFunctionCallException extends LogicException{
  final private function __clone() {}
  public function __construct($message, $code, $previous) {}
  final public function getMessage() {}
  final public function getCode() {}
  final public function getFile() {}
  final public function getLine() {}
  final public function getTrace() {}
  final public function getPrevious() {}
  final public function getTraceAsString() {}
  public function __toString() {}
}
class BadMethodCallException extends BadFunctionCallException{
  final private function __clone() {}
  public function __construct($message, $code, $previous) {}
  final public function getMessage() {}
  final public function getCode() {}
  final public function getFile() {}
  final public function getLine() {}
  final public function getTrace() {}
  final public function getPrevious() {}
  final public function getTraceAsString() {}
  public function __toString() {}
}
class DomainException extends LogicException{
  final private function __clone() {}
  public function __construct($message, $code, $previous) {}
  final public function getMessage() {}
  final public function getCode() {}
  final public function getFile() {}
  final public function getLine() {}
  final public function getTrace() {}
  final public function getPrevious() {}
  final public function getTraceAsString() {}
  public function __toString() {}
}
class InvalidArgumentException extends LogicException{
  final private function __clone() {}
  public function __construct($message, $code, $previous) {}
  final public function getMessage() {}
  final public function getCode() {}
  final public function getFile() {}
  final public function getLine() {}
  final public function getTrace() {}
  final public function getPrevious() {}
  final public function getTraceAsString() {}
  public function __toString() {}
}
class LengthException extends LogicException{
  final private function __clone() {}
  public function __construct($message, $code, $previous) {}
  final public function getMessage() {}
  final public function getCode() {}
  final public function getFile() {}
  final public function getLine() {}
  final public function getTrace() {}
  final public function getPrevious() {}
  final public function getTraceAsString() {}
  public function __toString() {}
}
class OutOfRangeException extends LogicException{
  final private function __clone() {}
  public function __construct($message, $code, $previous) {}
  final public function getMessage() {}
  final public function getCode() {}
  final public function getFile() {}
  final public function getLine() {}
  final public function getTrace() {}
  final public function getPrevious() {}
  final public function getTraceAsString() {}
  public function __toString() {}
}
class RuntimeException extends Exception{
  final private function __clone() {}
  public function __construct($message, $code, $previous) {}
  final public function getMessage() {}
  final public function getCode() {}
  final public function getFile() {}
  final public function getLine() {}
  final public function getTrace() {}
  final public function getPrevious() {}
  final public function getTraceAsString() {}
  public function __toString() {}
}
class OutOfBoundsException extends RuntimeException{
  final private function __clone() {}
  public function __construct($message, $code, $previous) {}
  final public function getMessage() {}
  final public function getCode() {}
  final public function getFile() {}
  final public function getLine() {}
  final public function getTrace() {}
  final public function getPrevious() {}
  final public function getTraceAsString() {}
  public function __toString() {}
}
class OverflowException extends RuntimeException{
  final private function __clone() {}
  public function __construct($message, $code, $previous) {}
  final public function getMessage() {}
  final public function getCode() {}
  final public function getFile() {}
  final public function getLine() {}
  final public function getTrace() {}
  final public function getPrevious() {}
  final public function getTraceAsString() {}
  public function __toString() {}
}
class RangeException extends RuntimeException{
  final private function __clone() {}
  public function __construct($message, $code, $previous) {}
  final public function getMessage() {}
  final public function getCode() {}
  final public function getFile() {}
  final public function getLine() {}
  final public function getTrace() {}
  final public function getPrevious() {}
  final public function getTraceAsString() {}
  public function __toString() {}
}
class UnderflowException extends RuntimeException{
  final private function __clone() {}
  public function __construct($message, $code, $previous) {}
  final public function getMessage() {}
  final public function getCode() {}
  final public function getFile() {}
  final public function getLine() {}
  final public function getTrace() {}
  final public function getPrevious() {}
  final public function getTraceAsString() {}
  public function __toString() {}
}
class UnexpectedValueException extends RuntimeException{
  final private function __clone() {}
  public function __construct($message, $code, $previous) {}
  final public function getMessage() {}
  final public function getCode() {}
  final public function getFile() {}
  final public function getLine() {}
  final public function getTrace() {}
  final public function getPrevious() {}
  final public function getTraceAsString() {}
  public function __toString() {}
}
class RecursiveIteratorIterator implements Iterator, Traversable, OuterIterator{
  public function __construct(Traversable $iterator, $mode, $flags) {}
  public function rewind() {}
  public function valid() {}
  public function key() {}
  public function current() {}
  public function next() {}
  public function getDepth() {}
  public function getSubIterator($level) {}
  public function getInnerIterator() {}
  public function beginIteration() {}
  public function endIteration() {}
  public function callHasChildren() {}
  public function callGetChildren() {}
  public function beginChildren() {}
  public function endChildren() {}
  public function nextElement() {}
  public function setMaxDepth($max_depth) {}
  public function getMaxDepth() {}
}
class IteratorIterator implements Iterator, Traversable, OuterIterator{
  public function __construct(Traversable $iterator) {}
  public function rewind() {}
  public function valid() {}
  public function key() {}
  public function current() {}
  public function next() {}
  public function getInnerIterator() {}
}
abstract class FilterIterator extends IteratorIterator implements OuterIterator, Traversable, Iterator{
  public function __construct(Iterator $iterator) {}
  public function rewind() {}
  public function valid() {}
  public function key() {}
  public function current() {}
  public function next() {}
  public function getInnerIterator() {}
  abstract public function accept() {}
}
abstract class RecursiveFilterIterator extends FilterIterator implements Iterator, Traversable, OuterIterator, RecursiveIterator{
  public function __construct(RecursiveIterator $iterator) {}
  public function hasChildren() {}
  public function getChildren() {}
  public function rewind() {}
  public function valid() {}
  public function key() {}
  public function current() {}
  public function next() {}
  public function getInnerIterator() {}
  abstract public function accept() {}
}
class CallbackFilterIterator extends FilterIterator implements Iterator, Traversable, OuterIterator{
  public function __construct(Iterator $iterator, $callback) {}
  public function accept() {}
  public function rewind() {}
  public function valid() {}
  public function key() {}
  public function current() {}
  public function next() {}
  public function getInnerIterator() {}
}
class RecursiveCallbackFilterIterator extends CallbackFilterIterator implements OuterIterator, Traversable, Iterator, RecursiveIterator{
  public function __construct(RecursiveIterator $iterator, $callback) {}
  public function hasChildren() {}
  public function getChildren() {}
  public function accept() {}
  public function rewind() {}
  public function valid() {}
  public function key() {}
  public function current() {}
  public function next() {}
  public function getInnerIterator() {}
}
class ParentIterator extends RecursiveFilterIterator implements RecursiveIterator, OuterIterator, Traversable, Iterator{
  public function __construct(RecursiveIterator $iterator) {}
  public function accept() {}
  public function hasChildren() {}
  public function getChildren() {}
  public function rewind() {}
  public function valid() {}
  public function key() {}
  public function current() {}
  public function next() {}
  public function getInnerIterator() {}
}
class LimitIterator extends IteratorIterator implements OuterIterator, Traversable, Iterator{
  public function __construct(Iterator $iterator, $offset, $count) {}
  public function rewind() {}
  public function valid() {}
  public function key() {}
  public function current() {}
  public function next() {}
  public function seek($position) {}
  public function getPosition() {}
  public function getInnerIterator() {}
}
class CachingIterator extends IteratorIterator implements OuterIterator, Traversable, Iterator, ArrayAccess, Countable{
  public function __construct(Iterator $iterator, $flags) {}
  public function rewind() {}
  public function valid() {}
  public function key() {}
  public function current() {}
  public function next() {}
  public function hasNext() {}
  public function __toString() {}
  public function getInnerIterator() {}
  public function getFlags() {}
  public function setFlags($flags) {}
  public function offsetGet($index) {}
  public function offsetSet($index, $newval) {}
  public function offsetUnset($index) {}
  public function offsetExists($index) {}
  public function getCache() {}
  public function count() {}
}
class RecursiveCachingIterator extends CachingIterator implements Countable, ArrayAccess, Iterator, Traversable, OuterIterator, RecursiveIterator{
  public function __construct(Iterator $iterator, $flags) {}
  public function hasChildren() {}
  public function getChildren() {}
  public function rewind() {}
  public function valid() {}
  public function key() {}
  public function current() {}
  public function next() {}
  public function hasNext() {}
  public function __toString() {}
  public function getInnerIterator() {}
  public function getFlags() {}
  public function setFlags($flags) {}
  public function offsetGet($index) {}
  public function offsetSet($index, $newval) {}
  public function offsetUnset($index) {}
  public function offsetExists($index) {}
  public function getCache() {}
  public function count() {}
}
class NoRewindIterator extends IteratorIterator implements OuterIterator, Traversable, Iterator{
  public function __construct(Iterator $iterator) {}
  public function rewind() {}
  public function valid() {}
  public function key() {}
  public function current() {}
  public function next() {}
  public function getInnerIterator() {}
}
class AppendIterator extends IteratorIterator implements OuterIterator, Traversable, Iterator{
  public function __construct() {}
  public function append(Iterator $iterator) {}
  public function rewind() {}
  public function valid() {}
  public function key() {}
  public function current() {}
  public function next() {}
  public function getInnerIterator() {}
  public function getIteratorIndex() {}
  public function getArrayIterator() {}
}
class InfiniteIterator extends IteratorIterator implements OuterIterator, Traversable, Iterator{
  public function __construct(Iterator $iterator) {}
  public function next() {}
  public function rewind() {}
  public function valid() {}
  public function key() {}
  public function current() {}
  public function getInnerIterator() {}
}
class RegexIterator extends FilterIterator implements Iterator, Traversable, OuterIterator{
  public function __construct(Iterator $iterator, $regex, $mode, $flags, $preg_flags) {}
  public function accept() {}
  public function getMode() {}
  public function setMode($mode) {}
  public function getFlags() {}
  public function setFlags($flags) {}
  public function getPregFlags() {}
  public function setPregFlags($preg_flags) {}
  public function getRegex() {}
  public function rewind() {}
  public function valid() {}
  public function key() {}
  public function current() {}
  public function next() {}
  public function getInnerIterator() {}
}
class RecursiveRegexIterator extends RegexIterator implements OuterIterator, Traversable, Iterator, RecursiveIterator{
  public function __construct(RecursiveIterator $iterator, $regex, $mode, $flags, $preg_flags) {}
  public function hasChildren() {}
  public function getChildren() {}
  public function accept() {}
  public function getMode() {}
  public function setMode($mode) {}
  public function getFlags() {}
  public function setFlags($flags) {}
  public function getPregFlags() {}
  public function setPregFlags($preg_flags) {}
  public function getRegex() {}
  public function rewind() {}
  public function valid() {}
  public function key() {}
  public function current() {}
  public function next() {}
  public function getInnerIterator() {}
}
class EmptyIterator implements Iterator, Traversable{
  public function rewind() {}
  public function valid() {}
  public function key() {}
  public function current() {}
  public function next() {}
}
class RecursiveTreeIterator extends RecursiveIteratorIterator implements OuterIterator, Traversable, Iterator{
  public function __construct(Traversable $iterator, $flags, $caching_it_flags, $mode) {}
  public function rewind() {}
  public function valid() {}
  public function key() {}
  public function current() {}
  public function next() {}
  public function beginIteration() {}
  public function endIteration() {}
  public function callHasChildren() {}
  public function callGetChildren() {}
  public function beginChildren() {}
  public function endChildren() {}
  public function nextElement() {}
  public function getPrefix() {}
  public function setPrefixPart($part, $value) {}
  public function getEntry() {}
  public function getPostfix() {}
  public function getDepth() {}
  public function getSubIterator($level) {}
  public function getInnerIterator() {}
  public function setMaxDepth($max_depth) {}
  public function getMaxDepth() {}
}
class ArrayObject implements IteratorAggregate, Traversable, ArrayAccess, Serializable, Countable{
  public function __construct($array) {}
  public function offsetExists($index) {}
  public function offsetGet($index) {}
  public function offsetSet($index, $newval) {}
  public function offsetUnset($index) {}
  public function append($value) {}
  public function getArrayCopy() {}
  public function count() {}
  public function getFlags() {}
  public function setFlags($flags) {}
  public function asort() {}
  public function ksort() {}
  public function uasort($cmp_function) {}
  public function uksort($cmp_function) {}
  public function natsort() {}
  public function natcasesort() {}
  public function unserialize($serialized) {}
  public function serialize() {}
  public function getIterator() {}
  public function exchangeArray($array) {}
  public function setIteratorClass($iteratorClass) {}
  public function getIteratorClass() {}
}
class ArrayIterator implements Iterator, Traversable, ArrayAccess, SeekableIterator, Serializable, Countable{
  public function __construct($array) {}
  public function offsetExists($index) {}
  public function offsetGet($index) {}
  public function offsetSet($index, $newval) {}
  public function offsetUnset($index) {}
  public function append($value) {}
  public function getArrayCopy() {}
  public function count() {}
  public function getFlags() {}
  public function setFlags($flags) {}
  public function asort() {}
  public function ksort() {}
  public function uasort($cmp_function) {}
  public function uksort($cmp_function) {}
  public function natsort() {}
  public function natcasesort() {}
  public function unserialize($serialized) {}
  public function serialize() {}
  public function rewind() {}
  public function current() {}
  public function key() {}
  public function next() {}
  public function valid() {}
  public function seek($position) {}
}
class RecursiveArrayIterator extends ArrayIterator implements Countable, Serializable, SeekableIterator, ArrayAccess, Traversable, Iterator, RecursiveIterator{
  public function hasChildren() {}
  public function getChildren() {}
  public function __construct($array) {}
  public function offsetExists($index) {}
  public function offsetGet($index) {}
  public function offsetSet($index, $newval) {}
  public function offsetUnset($index) {}
  public function append($value) {}
  public function getArrayCopy() {}
  public function count() {}
  public function getFlags() {}
  public function setFlags($flags) {}
  public function asort() {}
  public function ksort() {}
  public function uasort($cmp_function) {}
  public function uksort($cmp_function) {}
  public function natsort() {}
  public function natcasesort() {}
  public function unserialize($serialized) {}
  public function serialize() {}
  public function rewind() {}
  public function current() {}
  public function key() {}
  public function next() {}
  public function valid() {}
  public function seek($position) {}
}
class SplFileInfo{
  public function __construct($file_name) {}
  public function getPath() {}
  public function getFilename() {}
  public function getExtension() {}
  public function getBasename($suffix) {}
  public function getPathname() {}
  public function getPerms() {}
  public function getInode() {}
  public function getSize() {}
  public function getOwner() {}
  public function getGroup() {}
  public function getATime() {}
  public function getMTime() {}
  public function getCTime() {}
  public function getType() {}
  public function isWritable() {}
  public function isReadable() {}
  public function isExecutable() {}
  public function isFile() {}
  public function isDir() {}
  public function isLink() {}
  public function getLinkTarget() {}
  public function getRealPath() {}
  public function getFileInfo($class_name) {}
  public function getPathInfo($class_name) {}
  public function openFile($open_mode, $use_include_path, $context) {}
  public function setFileClass($class_name) {}
  public function setInfoClass($class_name) {}
  final public function _bad_state_ex() {}
  public function __toString() {}
}
class DirectoryIterator extends SplFileInfo implements Iterator, Traversable, SeekableIterator{
  public function __construct($path) {}
  public function getFilename() {}
  public function getExtension() {}
  public function getBasename($suffix) {}
  public function isDot() {}
  public function rewind() {}
  public function valid() {}
  public function key() {}
  public function current() {}
  public function next() {}
  public function seek($position) {}
  public function __toString() {}
  public function getPath() {}
  public function getPathname() {}
  public function getPerms() {}
  public function getInode() {}
  public function getSize() {}
  public function getOwner() {}
  public function getGroup() {}
  public function getATime() {}
  public function getMTime() {}
  public function getCTime() {}
  public function getType() {}
  public function isWritable() {}
  public function isReadable() {}
  public function isExecutable() {}
  public function isFile() {}
  public function isDir() {}
  public function isLink() {}
  public function getLinkTarget() {}
  public function getRealPath() {}
  public function getFileInfo($class_name) {}
  public function getPathInfo($class_name) {}
  public function openFile($open_mode, $use_include_path, $context) {}
  public function setFileClass($class_name) {}
  public function setInfoClass($class_name) {}
  final public function _bad_state_ex() {}
}
class FilesystemIterator extends DirectoryIterator implements SeekableIterator, Traversable, Iterator{
  public function __construct($path, $flags) {}
  public function rewind() {}
  public function next() {}
  public function key() {}
  public function current() {}
  public function getFlags() {}
  public function setFlags($flags) {}
  public function getFilename() {}
  public function getExtension() {}
  public function getBasename($suffix) {}
  public function isDot() {}
  public function valid() {}
  public function seek($position) {}
  public function __toString() {}
  public function getPath() {}
  public function getPathname() {}
  public function getPerms() {}
  public function getInode() {}
  public function getSize() {}
  public function getOwner() {}
  public function getGroup() {}
  public function getATime() {}
  public function getMTime() {}
  public function getCTime() {}
  public function getType() {}
  public function isWritable() {}
  public function isReadable() {}
  public function isExecutable() {}
  public function isFile() {}
  public function isDir() {}
  public function isLink() {}
  public function getLinkTarget() {}
  public function getRealPath() {}
  public function getFileInfo($class_name) {}
  public function getPathInfo($class_name) {}
  public function openFile($open_mode, $use_include_path, $context) {}
  public function setFileClass($class_name) {}
  public function setInfoClass($class_name) {}
  final public function _bad_state_ex() {}
}
class RecursiveDirectoryIterator extends FilesystemIterator implements Iterator, Traversable, SeekableIterator, RecursiveIterator{
  public function __construct($path, $flags) {}
  public function hasChildren($allow_links) {}
  public function getChildren() {}
  public function getSubPath() {}
  public function getSubPathname() {}
  public function rewind() {}
  public function next() {}
  public function key() {}
  public function current() {}
  public function getFlags() {}
  public function setFlags($flags) {}
  public function getFilename() {}
  public function getExtension() {}
  public function getBasename($suffix) {}
  public function isDot() {}
  public function valid() {}
  public function seek($position) {}
  public function __toString() {}
  public function getPath() {}
  public function getPathname() {}
  public function getPerms() {}
  public function getInode() {}
  public function getSize() {}
  public function getOwner() {}
  public function getGroup() {}
  public function getATime() {}
  public function getMTime() {}
  public function getCTime() {}
  public function getType() {}
  public function isWritable() {}
  public function isReadable() {}
  public function isExecutable() {}
  public function isFile() {}
  public function isDir() {}
  public function isLink() {}
  public function getLinkTarget() {}
  public function getRealPath() {}
  public function getFileInfo($class_name) {}
  public function getPathInfo($class_name) {}
  public function openFile($open_mode, $use_include_path, $context) {}
  public function setFileClass($class_name) {}
  public function setInfoClass($class_name) {}
  final public function _bad_state_ex() {}
}
class GlobIterator extends FilesystemIterator implements Iterator, Traversable, SeekableIterator, Countable{
  public function __construct($path, $flags) {}
  public function count() {}
  public function rewind() {}
  public function next() {}
  public function key() {}
  public function current() {}
  public function getFlags() {}
  public function setFlags($flags) {}
  public function getFilename() {}
  public function getExtension() {}
  public function getBasename($suffix) {}
  public function isDot() {}
  public function valid() {}
  public function seek($position) {}
  public function __toString() {}
  public function getPath() {}
  public function getPathname() {}
  public function getPerms() {}
  public function getInode() {}
  public function getSize() {}
  public function getOwner() {}
  public function getGroup() {}
  public function getATime() {}
  public function getMTime() {}
  public function getCTime() {}
  public function getType() {}
  public function isWritable() {}
  public function isReadable() {}
  public function isExecutable() {}
  public function isFile() {}
  public function isDir() {}
  public function isLink() {}
  public function getLinkTarget() {}
  public function getRealPath() {}
  public function getFileInfo($class_name) {}
  public function getPathInfo($class_name) {}
  public function openFile($open_mode, $use_include_path, $context) {}
  public function setFileClass($class_name) {}
  public function setInfoClass($class_name) {}
  final public function _bad_state_ex() {}
}
class SplFileObject extends SplFileInfo implements RecursiveIterator, Traversable, Iterator, SeekableIterator{
  public function __construct($file_name, $open_mode, $use_include_path, $context) {}
  public function rewind() {}
  public function eof() {}
  public function valid() {}
  public function fgets() {}
  public function fgetcsv($delimiter, $enclosure, $escape) {}
  public function fputcsv($fields, $delimiter, $enclosure) {}
  public function setCsvControl($delimiter, $enclosure, $escape) {}
  public function getCsvControl() {}
  public function flock($operation, &$wouldblock) {}
  public function fflush() {}
  public function ftell() {}
  public function fseek($pos, $whence) {}
  public function fgetc() {}
  public function fpassthru() {}
  public function fgetss($allowable_tags) {}
  public function fscanf($format) {}
  public function fwrite($str, $length) {}
  public function fstat() {}
  public function ftruncate($size) {}
  public function current() {}
  public function key() {}
  public function next() {}
  public function setFlags($flags) {}
  public function getFlags() {}
  public function setMaxLineLen($max_len) {}
  public function getMaxLineLen() {}
  public function hasChildren() {}
  public function getChildren() {}
  public function seek($line_pos) {}
  public function getCurrentLine() {}
  public function __toString() {}
  public function getPath() {}
  public function getFilename() {}
  public function getExtension() {}
  public function getBasename($suffix) {}
  public function getPathname() {}
  public function getPerms() {}
  public function getInode() {}
  public function getSize() {}
  public function getOwner() {}
  public function getGroup() {}
  public function getATime() {}
  public function getMTime() {}
  public function getCTime() {}
  public function getType() {}
  public function isWritable() {}
  public function isReadable() {}
  public function isExecutable() {}
  public function isFile() {}
  public function isDir() {}
  public function isLink() {}
  public function getLinkTarget() {}
  public function getRealPath() {}
  public function getFileInfo($class_name) {}
  public function getPathInfo($class_name) {}
  public function openFile($open_mode, $use_include_path, $context) {}
  public function setFileClass($class_name) {}
  public function setInfoClass($class_name) {}
  final public function _bad_state_ex() {}
}
class SplTempFileObject extends SplFileObject implements SeekableIterator, Iterator, Traversable, RecursiveIterator{
  public function __construct($max_memory) {}
  public function rewind() {}
  public function eof() {}
  public function valid() {}
  public function fgets() {}
  public function fgetcsv($delimiter, $enclosure, $escape) {}
  public function fputcsv($fields, $delimiter, $enclosure) {}
  public function setCsvControl($delimiter, $enclosure, $escape) {}
  public function getCsvControl() {}
  public function flock($operation, &$wouldblock) {}
  public function fflush() {}
  public function ftell() {}
  public function fseek($pos, $whence) {}
  public function fgetc() {}
  public function fpassthru() {}
  public function fgetss($allowable_tags) {}
  public function fscanf($format) {}
  public function fwrite($str, $length) {}
  public function fstat() {}
  public function ftruncate($size) {}
  public function current() {}
  public function key() {}
  public function next() {}
  public function setFlags($flags) {}
  public function getFlags() {}
  public function setMaxLineLen($max_len) {}
  public function getMaxLineLen() {}
  public function hasChildren() {}
  public function getChildren() {}
  public function seek($line_pos) {}
  public function getCurrentLine() {}
  public function __toString() {}
  public function getPath() {}
  public function getFilename() {}
  public function getExtension() {}
  public function getBasename($suffix) {}
  public function getPathname() {}
  public function getPerms() {}
  public function getInode() {}
  public function getSize() {}
  public function getOwner() {}
  public function getGroup() {}
  public function getATime() {}
  public function getMTime() {}
  public function getCTime() {}
  public function getType() {}
  public function isWritable() {}
  public function isReadable() {}
  public function isExecutable() {}
  public function isFile() {}
  public function isDir() {}
  public function isLink() {}
  public function getLinkTarget() {}
  public function getRealPath() {}
  public function getFileInfo($class_name) {}
  public function getPathInfo($class_name) {}
  public function openFile($open_mode, $use_include_path, $context) {}
  public function setFileClass($class_name) {}
  public function setInfoClass($class_name) {}
  final public function _bad_state_ex() {}
}
class SplDoublyLinkedList implements Iterator, Traversable, Countable, ArrayAccess, Serializable{
  public function pop() {}
  public function shift() {}
  public function push($value) {}
  public function unshift($value) {}
  public function top() {}
  public function bottom() {}
  public function isEmpty() {}
  public function setIteratorMode($flags) {}
  public function getIteratorMode() {}
  public function count() {}
  public function offsetExists($index) {}
  public function offsetGet($index) {}
  public function offsetSet($index, $newval) {}
  public function offsetUnset($index) {}
  public function rewind() {}
  public function current() {}
  public function key() {}
  public function next() {}
  public function prev() {}
  public function valid() {}
  public function unserialize($serialized) {}
  public function serialize() {}
}
class SplQueue extends SplDoublyLinkedList implements Serializable, ArrayAccess, Countable, Traversable, Iterator{
  public function enqueue($value) {}
  public function dequeue() {}
  public function pop() {}
  public function shift() {}
  public function push($value) {}
  public function unshift($value) {}
  public function top() {}
  public function bottom() {}
  public function isEmpty() {}
  public function setIteratorMode($flags) {}
  public function getIteratorMode() {}
  public function count() {}
  public function offsetExists($index) {}
  public function offsetGet($index) {}
  public function offsetSet($index, $newval) {}
  public function offsetUnset($index) {}
  public function rewind() {}
  public function current() {}
  public function key() {}
  public function next() {}
  public function prev() {}
  public function valid() {}
  public function unserialize($serialized) {}
  public function serialize() {}
}
class SplStack extends SplDoublyLinkedList implements Serializable, ArrayAccess, Countable, Traversable, Iterator{
  public function pop() {}
  public function shift() {}
  public function push($value) {}
  public function unshift($value) {}
  public function top() {}
  public function bottom() {}
  public function isEmpty() {}
  public function setIteratorMode($flags) {}
  public function getIteratorMode() {}
  public function count() {}
  public function offsetExists($index) {}
  public function offsetGet($index) {}
  public function offsetSet($index, $newval) {}
  public function offsetUnset($index) {}
  public function rewind() {}
  public function current() {}
  public function key() {}
  public function next() {}
  public function prev() {}
  public function valid() {}
  public function unserialize($serialized) {}
  public function serialize() {}
}
abstract class SplHeap implements Iterator, Traversable, Countable{
  public function extract() {}
  public function insert($value) {}
  public function top() {}
  public function count() {}
  public function isEmpty() {}
  public function rewind() {}
  public function current() {}
  public function key() {}
  public function next() {}
  public function valid() {}
  public function recoverFromCorruption() {}
  abstract protected function compare() {}
}
class SplMinHeap extends SplHeap implements Countable, Traversable, Iterator{
  protected function compare($a, $b) {}
  public function extract() {}
  public function insert($value) {}
  public function top() {}
  public function count() {}
  public function isEmpty() {}
  public function rewind() {}
  public function current() {}
  public function key() {}
  public function next() {}
  public function valid() {}
  public function recoverFromCorruption() {}
}
class SplMaxHeap extends SplHeap implements Countable, Traversable, Iterator{
  protected function compare($a, $b) {}
  public function extract() {}
  public function insert($value) {}
  public function top() {}
  public function count() {}
  public function isEmpty() {}
  public function rewind() {}
  public function current() {}
  public function key() {}
  public function next() {}
  public function valid() {}
  public function recoverFromCorruption() {}
}
class SplPriorityQueue implements Iterator, Traversable, Countable{
  public function compare($a, $b) {}
  public function insert($value, $priority) {}
  public function setExtractFlags($flags) {}
  public function top() {}
  public function extract() {}
  public function count() {}
  public function isEmpty() {}
  public function rewind() {}
  public function current() {}
  public function key() {}
  public function next() {}
  public function valid() {}
  public function recoverFromCorruption() {}
}
class SplFixedArray implements Iterator, Traversable, ArrayAccess, Countable{
  public function __construct($size) {}
  public function __wakeup() {}
  public function count() {}
  public function toArray() {}
  static public function fromArray($data, $save_indexes) {}
  public function getSize() {}
  public function setSize($value) {}
  public function offsetExists($index) {}
  public function offsetGet($index) {}
  public function offsetSet($index, $newval) {}
  public function offsetUnset($index) {}
  public function rewind() {}
  public function current() {}
  public function key() {}
  public function next() {}
  public function valid() {}
}
class SplObjectStorage implements Countable, Iterator, Traversable, Serializable, ArrayAccess{
  public function attach($object, $inf) {}
  public function detach($object) {}
  public function contains($object) {}
  public function addAll($object) {}
  public function removeAll($object) {}
  public function removeAllExcept($object) {}
  public function getInfo() {}
  public function setInfo($info) {}
  public function getHash($object) {}
  public function count() {}
  public function rewind() {}
  public function valid() {}
  public function key() {}
  public function current() {}
  public function next() {}
  public function unserialize($serialized) {}
  public function serialize() {}
  public function offsetExists($object) {}
  public function offsetSet($object, $inf) {}
  public function offsetUnset($object) {}
  public function offsetGet($object) {}
}
class MultipleIterator implements Iterator, Traversable{
  public function __construct($flags) {}
  public function getFlags() {}
  public function setFlags($flags) {}
  public function attachIterator(Iterator $iterator, $infos) {}
  public function detachIterator(Iterator $iterator) {}
  public function containsIterator(Iterator $iterator) {}
  public function countIterators() {}
  public function rewind() {}
  public function valid() {}
  public function key() {}
  public function current() {}
  public function next() {}
}
interface RecursiveIterator extends Iterator, Traversable{
  public function hasChildren() {}
  public function getChildren() {}
  public function current() {}
  public function next() {}
  public function key() {}
  public function valid() {}
  public function rewind() {}
}
interface OuterIterator extends Iterator, Traversable{
  public function getInnerIterator() {}
  public function current() {}
  public function next() {}
  public function key() {}
  public function valid() {}
  public function rewind() {}
}
interface Countable{
  public function count() {}
}
interface SeekableIterator extends Iterator, Traversable{
  public function seek($position) {}
  public function current() {}
  public function next() {}
  public function key() {}
  public function valid() {}
  public function rewind() {}
}
interface SplObserver{
  public function update(SplSubject $SplSubject) {}
}
interface SplSubject{
  public function attach(SplObserver $SplObserver) {}
  public function detach(SplObserver $SplObserver) {}
  public function notify() {}
}
