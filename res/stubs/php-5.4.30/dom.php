<?php
# Generated by mfn/php-reflection-gen 0.0.1
# PHP version 5.4.30, extension dom 20031129
function dom_import_simplexml($node) {}
class DOMException extends Exception{
  final private function __clone() {}
  public function __construct($message, $code, $previous) {}
  final public function getMessage() {}
  final public function getCode() {}
  final public function getFile() {}
  final public function getLine() {}
  final public function getTrace() {}
  final public function getPrevious() {}
  final public function getTraceAsString() {}
  public function __toString() {}
}
class DOMStringList{
  public function item($index) {}
}
class DOMNameList{
  public function getName($index) {}
  public function getNamespaceURI($index) {}
}
class DOMImplementationList{
  public function item($index) {}
}
class DOMImplementationSource{
  public function getDomimplementation($features) {}
  public function getDomimplementations($features) {}
}
class DOMImplementation{
  public function getFeature($feature, $version) {}
  public function hasFeature() {}
  public function createDocumentType($qualifiedName, $publicId, $systemId) {}
  public function createDocument($namespaceURI, $qualifiedName, DOMDocumentType $docType) {}
}
class DOMNode{
  public function insertBefore(DOMNode $newChild, DOMNode $refChild) {}
  public function replaceChild(DOMNode $newChild, DOMNode $oldChild) {}
  public function removeChild(DOMNode $oldChild) {}
  public function appendChild(DOMNode $newChild) {}
  public function hasChildNodes() {}
  public function cloneNode($deep) {}
  public function normalize() {}
  public function isSupported($feature, $version) {}
  public function hasAttributes() {}
  public function compareDocumentPosition(DOMNode $other) {}
  public function isSameNode(DOMNode $other) {}
  public function lookupPrefix($namespaceURI) {}
  public function isDefaultNamespace($namespaceURI) {}
  public function lookupNamespaceUri($prefix) {}
  public function isEqualNode(DOMNode $arg) {}
  public function getFeature($feature, $version) {}
  public function setUserData($key, $data, $handler) {}
  public function getUserData($key) {}
  public function getNodePath() {}
  public function getLineNo() {}
  public function C14N($exclusive, $with_comments, array $xpath, array $ns_prefixes) {}
  public function C14NFile($uri, $exclusive, $with_comments, array $xpath, array $ns_prefixes) {}
}
class DOMNameSpaceNode{
}
class DOMDocumentFragment extends DOMNode{
  public function __construct() {}
  public function appendXML($data) {}
  public function insertBefore(DOMNode $newChild, DOMNode $refChild) {}
  public function replaceChild(DOMNode $newChild, DOMNode $oldChild) {}
  public function removeChild(DOMNode $oldChild) {}
  public function appendChild(DOMNode $newChild) {}
  public function hasChildNodes() {}
  public function cloneNode($deep) {}
  public function normalize() {}
  public function isSupported($feature, $version) {}
  public function hasAttributes() {}
  public function compareDocumentPosition(DOMNode $other) {}
  public function isSameNode(DOMNode $other) {}
  public function lookupPrefix($namespaceURI) {}
  public function isDefaultNamespace($namespaceURI) {}
  public function lookupNamespaceUri($prefix) {}
  public function isEqualNode(DOMNode $arg) {}
  public function getFeature($feature, $version) {}
  public function setUserData($key, $data, $handler) {}
  public function getUserData($key) {}
  public function getNodePath() {}
  public function getLineNo() {}
  public function C14N($exclusive, $with_comments, array $xpath, array $ns_prefixes) {}
  public function C14NFile($uri, $exclusive, $with_comments, array $xpath, array $ns_prefixes) {}
}
class DOMDocument extends DOMNode{
  public function createElement($tagName, $value) {}
  public function createDocumentFragment() {}
  public function createTextNode($data) {}
  public function createComment($data) {}
  public function createCDATASection($data) {}
  public function createProcessingInstruction($target, $data) {}
  public function createAttribute($name) {}
  public function createEntityReference($name) {}
  public function getElementsByTagName($tagName) {}
  public function importNode(DOMNode $importedNode, $deep) {}
  public function createElementNS($namespaceURI, $qualifiedName, $value) {}
  public function createAttributeNS($namespaceURI, $qualifiedName) {}
  public function getElementsByTagNameNS($namespaceURI, $localName) {}
  public function getElementById($elementId) {}
  public function adoptNode(DOMNode $source) {}
  public function normalizeDocument() {}
  public function renameNode(DOMNode $node, $namespaceURI, $qualifiedName) {}
  public function load($source, $options) {}
  public function save($file) {}
  public function loadXML($source, $options) {}
  public function saveXML(DOMNode $node) {}
  public function __construct($version, $encoding) {}
  public function validate() {}
  public function xinclude($options) {}
  public function loadHTML($source, $options) {}
  public function loadHTMLFile($source, $options) {}
  public function saveHTML() {}
  public function saveHTMLFile($file) {}
  public function schemaValidate($filename) {}
  public function schemaValidateSource($source) {}
  public function relaxNGValidate($filename) {}
  public function relaxNGValidateSource($source) {}
  public function registerNodeClass($baseClass, $extendedClass) {}
  public function insertBefore(DOMNode $newChild, DOMNode $refChild) {}
  public function replaceChild(DOMNode $newChild, DOMNode $oldChild) {}
  public function removeChild(DOMNode $oldChild) {}
  public function appendChild(DOMNode $newChild) {}
  public function hasChildNodes() {}
  public function cloneNode($deep) {}
  public function normalize() {}
  public function isSupported($feature, $version) {}
  public function hasAttributes() {}
  public function compareDocumentPosition(DOMNode $other) {}
  public function isSameNode(DOMNode $other) {}
  public function lookupPrefix($namespaceURI) {}
  public function isDefaultNamespace($namespaceURI) {}
  public function lookupNamespaceUri($prefix) {}
  public function isEqualNode(DOMNode $arg) {}
  public function getFeature($feature, $version) {}
  public function setUserData($key, $data, $handler) {}
  public function getUserData($key) {}
  public function getNodePath() {}
  public function getLineNo() {}
  public function C14N($exclusive, $with_comments, array $xpath, array $ns_prefixes) {}
  public function C14NFile($uri, $exclusive, $with_comments, array $xpath, array $ns_prefixes) {}
}
class DOMNodeList implements Traversable{
  public function item($index) {}
}
class DOMNamedNodeMap implements Traversable{
  public function getNamedItem($name) {}
  public function setNamedItem(DOMNode $arg) {}
  public function removeNamedItem($name) {}
  public function item($index) {}
  public function getNamedItemNS($namespaceURI, $localName) {}
  public function setNamedItemNS(DOMNode $arg) {}
  public function removeNamedItemNS($namespaceURI, $localName) {}
}
class DOMCharacterData extends DOMNode{
  public function substringData($offset, $count) {}
  public function appendData($arg) {}
  public function insertData($offset, $arg) {}
  public function deleteData($offset, $count) {}
  public function replaceData($offset, $count, $arg) {}
  public function insertBefore(DOMNode $newChild, DOMNode $refChild) {}
  public function replaceChild(DOMNode $newChild, DOMNode $oldChild) {}
  public function removeChild(DOMNode $oldChild) {}
  public function appendChild(DOMNode $newChild) {}
  public function hasChildNodes() {}
  public function cloneNode($deep) {}
  public function normalize() {}
  public function isSupported($feature, $version) {}
  public function hasAttributes() {}
  public function compareDocumentPosition(DOMNode $other) {}
  public function isSameNode(DOMNode $other) {}
  public function lookupPrefix($namespaceURI) {}
  public function isDefaultNamespace($namespaceURI) {}
  public function lookupNamespaceUri($prefix) {}
  public function isEqualNode(DOMNode $arg) {}
  public function getFeature($feature, $version) {}
  public function setUserData($key, $data, $handler) {}
  public function getUserData($key) {}
  public function getNodePath() {}
  public function getLineNo() {}
  public function C14N($exclusive, $with_comments, array $xpath, array $ns_prefixes) {}
  public function C14NFile($uri, $exclusive, $with_comments, array $xpath, array $ns_prefixes) {}
}
class DOMAttr extends DOMNode{
  public function isId() {}
  public function __construct($name, $value) {}
  public function insertBefore(DOMNode $newChild, DOMNode $refChild) {}
  public function replaceChild(DOMNode $newChild, DOMNode $oldChild) {}
  public function removeChild(DOMNode $oldChild) {}
  public function appendChild(DOMNode $newChild) {}
  public function hasChildNodes() {}
  public function cloneNode($deep) {}
  public function normalize() {}
  public function isSupported($feature, $version) {}
  public function hasAttributes() {}
  public function compareDocumentPosition(DOMNode $other) {}
  public function isSameNode(DOMNode $other) {}
  public function lookupPrefix($namespaceURI) {}
  public function isDefaultNamespace($namespaceURI) {}
  public function lookupNamespaceUri($prefix) {}
  public function isEqualNode(DOMNode $arg) {}
  public function getFeature($feature, $version) {}
  public function setUserData($key, $data, $handler) {}
  public function getUserData($key) {}
  public function getNodePath() {}
  public function getLineNo() {}
  public function C14N($exclusive, $with_comments, array $xpath, array $ns_prefixes) {}
  public function C14NFile($uri, $exclusive, $with_comments, array $xpath, array $ns_prefixes) {}
}
class DOMElement extends DOMNode{
  public function getAttribute($name) {}
  public function setAttribute($name, $value) {}
  public function removeAttribute($name) {}
  public function getAttributeNode($name) {}
  public function setAttributeNode(DOMAttr $newAttr) {}
  public function removeAttributeNode(DOMAttr $oldAttr) {}
  public function getElementsByTagName($name) {}
  public function getAttributeNS($namespaceURI, $localName) {}
  public function setAttributeNS($namespaceURI, $qualifiedName, $value) {}
  public function removeAttributeNS($namespaceURI, $localName) {}
  public function getAttributeNodeNS($namespaceURI, $localName) {}
  public function setAttributeNodeNS(DOMAttr $newAttr) {}
  public function getElementsByTagNameNS($namespaceURI, $localName) {}
  public function hasAttribute($name) {}
  public function hasAttributeNS($namespaceURI, $localName) {}
  public function setIdAttribute($name, $isId) {}
  public function setIdAttributeNS($namespaceURI, $localName, $isId) {}
  public function setIdAttributeNode(DOMAttr $attr, $isId) {}
  public function __construct($name, $value, $uri) {}
  public function insertBefore(DOMNode $newChild, DOMNode $refChild) {}
  public function replaceChild(DOMNode $newChild, DOMNode $oldChild) {}
  public function removeChild(DOMNode $oldChild) {}
  public function appendChild(DOMNode $newChild) {}
  public function hasChildNodes() {}
  public function cloneNode($deep) {}
  public function normalize() {}
  public function isSupported($feature, $version) {}
  public function hasAttributes() {}
  public function compareDocumentPosition(DOMNode $other) {}
  public function isSameNode(DOMNode $other) {}
  public function lookupPrefix($namespaceURI) {}
  public function isDefaultNamespace($namespaceURI) {}
  public function lookupNamespaceUri($prefix) {}
  public function isEqualNode(DOMNode $arg) {}
  public function getFeature($feature, $version) {}
  public function setUserData($key, $data, $handler) {}
  public function getUserData($key) {}
  public function getNodePath() {}
  public function getLineNo() {}
  public function C14N($exclusive, $with_comments, array $xpath, array $ns_prefixes) {}
  public function C14NFile($uri, $exclusive, $with_comments, array $xpath, array $ns_prefixes) {}
}
class DOMText extends DOMCharacterData{
  public function splitText($offset) {}
  public function isWhitespaceInElementContent() {}
  public function isElementContentWhitespace() {}
  public function replaceWholeText($content) {}
  public function __construct($value) {}
  public function substringData($offset, $count) {}
  public function appendData($arg) {}
  public function insertData($offset, $arg) {}
  public function deleteData($offset, $count) {}
  public function replaceData($offset, $count, $arg) {}
  public function insertBefore(DOMNode $newChild, DOMNode $refChild) {}
  public function replaceChild(DOMNode $newChild, DOMNode $oldChild) {}
  public function removeChild(DOMNode $oldChild) {}
  public function appendChild(DOMNode $newChild) {}
  public function hasChildNodes() {}
  public function cloneNode($deep) {}
  public function normalize() {}
  public function isSupported($feature, $version) {}
  public function hasAttributes() {}
  public function compareDocumentPosition(DOMNode $other) {}
  public function isSameNode(DOMNode $other) {}
  public function lookupPrefix($namespaceURI) {}
  public function isDefaultNamespace($namespaceURI) {}
  public function lookupNamespaceUri($prefix) {}
  public function isEqualNode(DOMNode $arg) {}
  public function getFeature($feature, $version) {}
  public function setUserData($key, $data, $handler) {}
  public function getUserData($key) {}
  public function getNodePath() {}
  public function getLineNo() {}
  public function C14N($exclusive, $with_comments, array $xpath, array $ns_prefixes) {}
  public function C14NFile($uri, $exclusive, $with_comments, array $xpath, array $ns_prefixes) {}
}
class DOMComment extends DOMCharacterData{
  public function __construct($value) {}
  public function substringData($offset, $count) {}
  public function appendData($arg) {}
  public function insertData($offset, $arg) {}
  public function deleteData($offset, $count) {}
  public function replaceData($offset, $count, $arg) {}
  public function insertBefore(DOMNode $newChild, DOMNode $refChild) {}
  public function replaceChild(DOMNode $newChild, DOMNode $oldChild) {}
  public function removeChild(DOMNode $oldChild) {}
  public function appendChild(DOMNode $newChild) {}
  public function hasChildNodes() {}
  public function cloneNode($deep) {}
  public function normalize() {}
  public function isSupported($feature, $version) {}
  public function hasAttributes() {}
  public function compareDocumentPosition(DOMNode $other) {}
  public function isSameNode(DOMNode $other) {}
  public function lookupPrefix($namespaceURI) {}
  public function isDefaultNamespace($namespaceURI) {}
  public function lookupNamespaceUri($prefix) {}
  public function isEqualNode(DOMNode $arg) {}
  public function getFeature($feature, $version) {}
  public function setUserData($key, $data, $handler) {}
  public function getUserData($key) {}
  public function getNodePath() {}
  public function getLineNo() {}
  public function C14N($exclusive, $with_comments, array $xpath, array $ns_prefixes) {}
  public function C14NFile($uri, $exclusive, $with_comments, array $xpath, array $ns_prefixes) {}
}
class DOMTypeinfo{
}
class DOMUserDataHandler{
  public function handle() {}
}
class DOMDomError{
}
class DOMErrorHandler{
  public function handleError(DOMDomError $error) {}
}
class DOMLocator{
}
class DOMConfiguration{
  public function setParameter($name, $value) {}
  public function getParameter($name) {}
  public function canSetParameter($name, $value) {}
}
class DOMCdataSection extends DOMText{
  public function __construct($value) {}
  public function splitText($offset) {}
  public function isWhitespaceInElementContent() {}
  public function isElementContentWhitespace() {}
  public function replaceWholeText($content) {}
  public function substringData($offset, $count) {}
  public function appendData($arg) {}
  public function insertData($offset, $arg) {}
  public function deleteData($offset, $count) {}
  public function replaceData($offset, $count, $arg) {}
  public function insertBefore(DOMNode $newChild, DOMNode $refChild) {}
  public function replaceChild(DOMNode $newChild, DOMNode $oldChild) {}
  public function removeChild(DOMNode $oldChild) {}
  public function appendChild(DOMNode $newChild) {}
  public function hasChildNodes() {}
  public function cloneNode($deep) {}
  public function normalize() {}
  public function isSupported($feature, $version) {}
  public function hasAttributes() {}
  public function compareDocumentPosition(DOMNode $other) {}
  public function isSameNode(DOMNode $other) {}
  public function lookupPrefix($namespaceURI) {}
  public function isDefaultNamespace($namespaceURI) {}
  public function lookupNamespaceUri($prefix) {}
  public function isEqualNode(DOMNode $arg) {}
  public function getFeature($feature, $version) {}
  public function setUserData($key, $data, $handler) {}
  public function getUserData($key) {}
  public function getNodePath() {}
  public function getLineNo() {}
  public function C14N($exclusive, $with_comments, array $xpath, array $ns_prefixes) {}
  public function C14NFile($uri, $exclusive, $with_comments, array $xpath, array $ns_prefixes) {}
}
class DOMDocumentType extends DOMNode{
  public function insertBefore(DOMNode $newChild, DOMNode $refChild) {}
  public function replaceChild(DOMNode $newChild, DOMNode $oldChild) {}
  public function removeChild(DOMNode $oldChild) {}
  public function appendChild(DOMNode $newChild) {}
  public function hasChildNodes() {}
  public function cloneNode($deep) {}
  public function normalize() {}
  public function isSupported($feature, $version) {}
  public function hasAttributes() {}
  public function compareDocumentPosition(DOMNode $other) {}
  public function isSameNode(DOMNode $other) {}
  public function lookupPrefix($namespaceURI) {}
  public function isDefaultNamespace($namespaceURI) {}
  public function lookupNamespaceUri($prefix) {}
  public function isEqualNode(DOMNode $arg) {}
  public function getFeature($feature, $version) {}
  public function setUserData($key, $data, $handler) {}
  public function getUserData($key) {}
  public function getNodePath() {}
  public function getLineNo() {}
  public function C14N($exclusive, $with_comments, array $xpath, array $ns_prefixes) {}
  public function C14NFile($uri, $exclusive, $with_comments, array $xpath, array $ns_prefixes) {}
}
class DOMNotation extends DOMNode{
  public function insertBefore(DOMNode $newChild, DOMNode $refChild) {}
  public function replaceChild(DOMNode $newChild, DOMNode $oldChild) {}
  public function removeChild(DOMNode $oldChild) {}
  public function appendChild(DOMNode $newChild) {}
  public function hasChildNodes() {}
  public function cloneNode($deep) {}
  public function normalize() {}
  public function isSupported($feature, $version) {}
  public function hasAttributes() {}
  public function compareDocumentPosition(DOMNode $other) {}
  public function isSameNode(DOMNode $other) {}
  public function lookupPrefix($namespaceURI) {}
  public function isDefaultNamespace($namespaceURI) {}
  public function lookupNamespaceUri($prefix) {}
  public function isEqualNode(DOMNode $arg) {}
  public function getFeature($feature, $version) {}
  public function setUserData($key, $data, $handler) {}
  public function getUserData($key) {}
  public function getNodePath() {}
  public function getLineNo() {}
  public function C14N($exclusive, $with_comments, array $xpath, array $ns_prefixes) {}
  public function C14NFile($uri, $exclusive, $with_comments, array $xpath, array $ns_prefixes) {}
}
class DOMEntity extends DOMNode{
  public function insertBefore(DOMNode $newChild, DOMNode $refChild) {}
  public function replaceChild(DOMNode $newChild, DOMNode $oldChild) {}
  public function removeChild(DOMNode $oldChild) {}
  public function appendChild(DOMNode $newChild) {}
  public function hasChildNodes() {}
  public function cloneNode($deep) {}
  public function normalize() {}
  public function isSupported($feature, $version) {}
  public function hasAttributes() {}
  public function compareDocumentPosition(DOMNode $other) {}
  public function isSameNode(DOMNode $other) {}
  public function lookupPrefix($namespaceURI) {}
  public function isDefaultNamespace($namespaceURI) {}
  public function lookupNamespaceUri($prefix) {}
  public function isEqualNode(DOMNode $arg) {}
  public function getFeature($feature, $version) {}
  public function setUserData($key, $data, $handler) {}
  public function getUserData($key) {}
  public function getNodePath() {}
  public function getLineNo() {}
  public function C14N($exclusive, $with_comments, array $xpath, array $ns_prefixes) {}
  public function C14NFile($uri, $exclusive, $with_comments, array $xpath, array $ns_prefixes) {}
}
class DOMEntityReference extends DOMNode{
  public function __construct($name) {}
  public function insertBefore(DOMNode $newChild, DOMNode $refChild) {}
  public function replaceChild(DOMNode $newChild, DOMNode $oldChild) {}
  public function removeChild(DOMNode $oldChild) {}
  public function appendChild(DOMNode $newChild) {}
  public function hasChildNodes() {}
  public function cloneNode($deep) {}
  public function normalize() {}
  public function isSupported($feature, $version) {}
  public function hasAttributes() {}
  public function compareDocumentPosition(DOMNode $other) {}
  public function isSameNode(DOMNode $other) {}
  public function lookupPrefix($namespaceURI) {}
  public function isDefaultNamespace($namespaceURI) {}
  public function lookupNamespaceUri($prefix) {}
  public function isEqualNode(DOMNode $arg) {}
  public function getFeature($feature, $version) {}
  public function setUserData($key, $data, $handler) {}
  public function getUserData($key) {}
  public function getNodePath() {}
  public function getLineNo() {}
  public function C14N($exclusive, $with_comments, array $xpath, array $ns_prefixes) {}
  public function C14NFile($uri, $exclusive, $with_comments, array $xpath, array $ns_prefixes) {}
}
class DOMProcessingInstruction extends DOMNode{
  public function __construct($name, $value) {}
  public function insertBefore(DOMNode $newChild, DOMNode $refChild) {}
  public function replaceChild(DOMNode $newChild, DOMNode $oldChild) {}
  public function removeChild(DOMNode $oldChild) {}
  public function appendChild(DOMNode $newChild) {}
  public function hasChildNodes() {}
  public function cloneNode($deep) {}
  public function normalize() {}
  public function isSupported($feature, $version) {}
  public function hasAttributes() {}
  public function compareDocumentPosition(DOMNode $other) {}
  public function isSameNode(DOMNode $other) {}
  public function lookupPrefix($namespaceURI) {}
  public function isDefaultNamespace($namespaceURI) {}
  public function lookupNamespaceUri($prefix) {}
  public function isEqualNode(DOMNode $arg) {}
  public function getFeature($feature, $version) {}
  public function setUserData($key, $data, $handler) {}
  public function getUserData($key) {}
  public function getNodePath() {}
  public function getLineNo() {}
  public function C14N($exclusive, $with_comments, array $xpath, array $ns_prefixes) {}
  public function C14NFile($uri, $exclusive, $with_comments, array $xpath, array $ns_prefixes) {}
}
class DOMStringExtend{
  public function findOffset16($offset32) {}
  public function findOffset32($offset16) {}
}
class DOMXPath{
  public function __construct(DOMDocument $doc) {}
  public function registerNamespace($prefix, $uri) {}
  public function query($expr, DOMNode $context, $registerNodeNS) {}
  public function evaluate($expr, DOMNode $context, $registerNodeNS) {}
  public function registerPhpFunctions() {}
}
